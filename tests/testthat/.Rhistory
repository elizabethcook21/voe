counts2[str_replace(f,'_meta_stats.rds','')]=gf %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
counts=data.frame(unlist(counts),unlist(counts2))
colnames(counts)=c('Features remaining post regressions','Significant features (FDR < 0.05)')
print(counts)
knitr::opts_chunk$set(echo = TRUE)
#generate meta-analysis plots, significant feature summaries, vibration lists
setwd('~/Dropbox (HMS)/RagGroup Team Folder/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis')
#compute overall FDR
counts <- list()
counts2 <- list()
files=list.files()
files=files[grep('metaphlan',files)]
files=files[grep('rds',files)]
metaph=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
metaph[[file]]=f
}
#find number of features going into models and overlap between output
library(tidyverse)
library(UpSetR)
library(stringr)
library(cowplot)
library(ggplot2)
library(tidyr)
library(magrittr)
library(broom)
library(stringr)
library(ecodist)
library(pheatmap)
library(rlang)
library(circlize)
library(metafor)
library(meta)
library(lme4)
library(ggpubr)
library(lmerTest)
library(broom.mixed)
theme_set(theme_cowplot())
#generate meta-analysis plots, significant feature summaries, vibration lists
setwd('~/Dropbox (HMS)/RagGroup Team Folder/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis')
#compute overall FDR
counts <- list()
counts2 <- list()
files=list.files()
files=files[grep('metaphlan',files)]
files=files[grep('rds',files)]
metaph=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
metaph[[file]]=f
}
metaph = bind_rows(metaph)
metaph$dtype = 'metaphlan'
metaph = metaph %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=metaph %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
files=list.files()
files=files[grep('pathway',files)]
files=files[grep('rds',files)]
path=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
path[[file]]=f
}
path = bind_rows(path)
path$dtype = 'pathways'
path = path %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=path %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
#gene family stuff
files=list.files()
files=files[grep('families',files)]
files=files[grep('rds',files)]
gf=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
gf[[file]]=f
}
gf = bind_rows(gf)
gf$dtype = 'genefamilies'
gf = gf %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=gf %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
counts=data.frame(unlist(counts),unlist(counts2))
colnames(counts)=c('Features remaining post regressions','Significant features (FDR < 0.05)')
print(counts)
library(curatedMetagenomicData)
unique(combined_metadata)
unique(combined_metadata$dataset_name)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("curatedMetagenomicData")
library(curatedMetagenomicData)
combined_metadata
combined_metadata %>% select(dataset_name,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p)
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition)
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition) %>% summarise
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition) %>% summarise(.)
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition) %>% summarise_all()
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition) %>% summarise_all(mean=mean(.))
combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition) %>% summary
foo=combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition)
by(foo,foo$study_condition,summary)
library(v)
psychv
library(psych)
install.packages('psych')
library(psych)
decribeBy(foo,foo$study_condition)
psych::decribeBy(foo,foo$study_condition)
psych::describeBy(foo,foo$study_condition)
psych::describeBy(foo,foo$study_condition,mat=TRUE)
install.packages('skimr')
foo %>% group_by(study_condition) %>% skim()
library(skimr)
foo %>% group_by(study_condition) %>% skim()
x=foo %>% group_by(study_condition) %>% skim()
view(x)
View(x)
x=foo %>% group_by(study_condition) %>% skim(gender)
install.packages('summarytools')
library(summarytools)
devtools::intall_github("dcomtois/summarytools", ref = "no-x11-check")
library(devtools)
install.packages('devtols')
install.packages('devtolos')
install.packages('devtools')
capabilities("tcltk")
devtools::intall_github("dcomtois/summarytools", ref = "no-x11-check")
devtools::install_github("dcomtois/summarytools", ref = "no-x11-check")
install.packages('summarytools')
install.packages('summarytools')
foo=combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition)
library(tidyverse)
library(curatedMetagenomicData)
foo=combined_metadata %>% select(dataset_name,study_condition,age,BMI,gender,number_reads,born_method,days_from_first_collection,age_category,HLA,glucose, cholesterol, adiponectin, hscrp, leptin, glutamate_decarboxylase_2_antibody,creatinine,cd163,c_peptide,insulin_cat,fgf_19,il_1,glp_1,triglycerides,born_method,dyastolic_p,systolic_p) %>% group_by(study_condition)
install.packages('summarytools')
install.packages('summarytools')
install.packages('summarytools')
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
save(installedpkgs, file="!/installed_old.rda")
save(installedpkgs, file="~/installed_old.rda")
data("iris")
data
head(data)
heaD(iris)
head(iris)
library(ggplot2)
library(lme3)
library(lme4)
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width,fill=Species))+geom_point()
ggplot(data=iris,aes(x=Sepal.Length,y=Sepal.Width,color=Species))+geom_point()
library(tidyverse)
data2=iris %>% filter(Species=='')
data2=iris %>% filter(Species=='iris')
data2=iris %>% filter(Species=='setosa')
head(data2)
fit=lm(data=data2,Sepal.Width ~ Sepal.Length)
summary(fit)
fit=lm(data=data,Sepal.Width ~ Sepal.Length)
fit=lm(data=itis,Sepal.Width ~ Sepal.Length)
fit=lm(data=iris,Sepal.Width ~ Sepal.Length)
summary(fit)
library(lme4)
lmer(data=iris,Sepal.Width ~ Sepal.Length + (1|Species))
summary(lmer(data=iris,Sepal.Width ~ Sepal.Length + (1|Species)))
library(lmerTest)
summary(lmer(data=iris,Sepal.Width ~ Sepal.Length + (1|Species)))
library(curatedMetagenomicData)
\
knitr::opts_chunk$set(echo = TRUE)
#find number of features going into models and overlap between output
library(tidyverse)
library(UpSetR)
library(stringr)
library(cowplot)
library(ggplot2)
library(tidyr)
library(magrittr)
library(ggnewscale)
library(ggalluvial)
library(phylobase)
library(reshape2)
library(phytools)
library(broom)
library(taxonomizr)
library(ecodist)
library(ggtree)
library(readxl)
library(pheatmap)
library(rlang)
library(circlize)
library(metafor)
library(meta)
library(lme4)
library(ggpubr)
library(lmerTest)
library(broom.mixed)
theme_set(theme_cowplot())
#generate meta-analysis plots, significant feature summaries, vibration lists
setwd('~/Dropbox (HMS)/RagGroup Team Folder/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis')
#species/pathway/marker number of features
species_count=6832
pathway_count=76251
genefamily_count=1167504
####gotta use counts to generate plot
#vibration output
filter_unnest_feature_vib <- function(vib_df, feature_num) {
vib_df = vib_df %>% filter(feature == feature_num)
vib_df = vib_df %>% slice(which(map_lgl(vib_df$feature_fit, ~class(.)[[1]] == "tbl_df")))
vib_df= vib_df %>% filter(unlist(map(feature_fit,nrow))==1)
temp=vib_df$feature_fit
temp=bind_rows(temp)
vib_df = vib_df %>% select(-feature_fit) %>% bind_cols(temp)
return(vib_df)
}
get_feature_volcanoplot <- function(vib_df, feature_num,title,fdr,y,x) {
feature_vib_df <- vib_df#filter_unnest_feature_vib(vib_df, feature_num)
if(nrow(feature_vib_df)>10000){
feature_vib_df=sample_n(feature_vib_df,10000)
}
if(nrow(feature_vib_df)==0){
return('')
}
#bonferroni_corrected <- 1 - (1 - 0.05) ^ (1 / nrow(feature_vib_df))
plot <- ggplot(data = feature_vib_df, aes(x = estimate, y = -log10(p.value))) +
geom_point(alpha=.5,aes(color = dataset_name)) +
geom_hline(yintercept = -log10(fdr),linetype='dashed') +theme(legend.position="bottom") +theme(legend.title = element_blank()) + xlab('Estimate') +xlim(-3,3) + ylim(0,13)+ theme(legend.text=element_text(size=6))+ggtitle(title)+ theme(plot.title = element_text(size=12)) + geom_hline(yintercept = -log10(0.05)) + geom_point(aes(x=x, y=-log10(y)),shape=23, fill="blue", color="darkred", size=3)
return(plot)
}
get_all_adjusters <- function(vib_df,feature_num) {
adjusters=vib_df %>% filter(feature==feature_num) %>% select(vars) %>% unlist %>% unique
return(adjusters)
}
get_adjuster_expanded_vibrations <- function(voe_df,feature) {
copy_voe_df <- duplicate(voe_df, shallow = FALSE)
adjusters <- get_all_adjusters(voe_df,feature)
for (variable in adjusters) {
copy_voe_df %<>% mutate(newcol = map_int(copy_voe_df$vars, ~(variable %in% .)))
colnames(copy_voe_df)[length(colnames(copy_voe_df))] <- variable
}
copy_voe_df=filter_unnest_feature_vib(copy_voe_df,feature)
return(copy_voe_df)
}
get_feature_volcanoplot_by_adjuster <- function(feature_vib_df,title,adjuster,fdr,x,y) {
plot <- ggplot(data = feature_vib_df, aes(x = estimate, y = -log10(p.value))) +
geom_point(alpha=.5,aes(color = as.logical(feature_vib_df[[adjuster]]))) +labs(color = adjuster)+
geom_hline(yintercept = -log10(.05)) +theme(legend.position="bottom") + xlab('Estimate') + theme(legend.text=element_text(size=8))+ggtitle(title)+ theme(plot.title = element_text(size=10))+ geom_point(aes(x=x, y=-log10(y)),shape=23, fill="blue", color="darkred", size=3)+geom_hline(yintercept = -log10(fdr),linetype='dashed')+xlim(-3,3) + ylim(0,13)
return(plot)
}
setwd('~/Dropbox (HMS)/RagGroup Team Folder/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis/voe')
#generate meta-analysis plots, significant feature summaries, vibration lists
setwd('~/Dropbox (HMS)/RagGroup Team Folder/Braden Tierney/vibration_of_effects_microbiome/meta_stats/disease_meta_analysis')
#compute overall FDR
counts <- list()
counts2 <- list()
files=list.files()
files=files[grep('metaphlan',files)]
files=files[grep('rds',files)]
metaph=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
metaph[[file]]=f
}
metaph = bind_rows(metaph)
metaph$dtype = 'metaphlan'
metaph = metaph %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=metaph %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
files=list.files()
files=files[grep('pathway',files)]
files=files[grep('rds',files)]
path=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
path[[file]]=f
}
path = bind_rows(path)
path$dtype = 'pathways'
path = path %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=path %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
#gene family stuff
files=list.files()
files=files[grep('families',files)]
files=files[grep('rds',files)]
gf=list()
for(file in files){
f=readRDS(file)
counts[str_replace(file,'_meta_stats.rds','')]=nrow(f)
f$filename=file
f$phenotype=strsplit(file,'_')[[1]][2]
gf[[file]]=f
}
gf = bind_rows(gf)
gf$dtype = 'genefamilies'
gf = gf %>% mutate(adj=p.adjust(p.val,method='BY'))
for(f in files){
counts2[str_replace(f,'_meta_stats.rds','')]=gf %>% filter(filename==f) %>% filter(adj<.05) %>% nrow
}
counts=data.frame(unlist(counts),unlist(counts2))
colnames(counts)=c('Features remaining post regressions','Significant features (FDR < 0.05)')
print(counts)
install.packages('taxise')
install.packages(c('tidyverse','cowplot','gridExtra','ggplot2','circlize','ggpubr','mosaic','phaeetmap','gespeR','igraph','matrixStats','reshap2','RColorBrewer'))
devtools::install_local('~/GitHub/voe/')
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
devtools::test()
devtools::test(voe)
devtools::test(voe'')
devtools::test('voe')
devtools::test('~/GitHub/voe/')
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
devtools::test('~/GitHub/voe/')
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(vie)
library(voe)
devtools::install_local('~/GitHub/voe/',force=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
#example files for loading
library(tidyverse)
independent_variables = readRDS('~/GitHub/voe/data/final_metadata.rds')[[2]][[1]] %>% type.convert() %>% dplyr::select(-runID,-subjectID)
dependent_variables = readRDS('~/GitHub/voe/data/abundance_data.rds') %>% dplyr::select(-dataset_name)
dependent_variables = dependent_variables[,1:200]
primary_variable = 'BMI'
fdr_method='BY'
fdr_cutoff=.99
dependent_variables=list('dataset1'=dependent_variables,'dataset2'=dependent_variables)
independent_variables=list('dataset1'=independent_variables,'dataset2'=independent_variables)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
#example files for loading
library(tidyverse)
independent_variables = readRDS('~/GitHub/voe/data/final_metadata.rds')[[2]][[1]] %>% type.convert() %>% dplyr::select(-runID,-subjectID)
dependent_variables = readRDS('~/GitHub/voe/data/abundance_data.rds') %>% dplyr::select(-dataset_name)
dependent_variables = dependent_variables[,1:200]
primary_variable = 'BMI'
fdr_method='BY'
fdr_cutoff=.99
dependent_variables=list('dataset1'=dependent_variables,'dataset2'=dependent_variables)
independent_variables=list('dataset1'=independent_variables,'dataset2'=independent_variables)
voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
library(tidyverse)
independent_variables = readRDS('~/GitHub/voe/data/final_metadata.rds')[[2]][[1]] %>% type.convert() %>% dplyr::select(-runID,-subjectID)
dependent_variables = readRDS('~/GitHub/voe/data/abundance_data.rds') %>% dplyr::select(-dataset_name)
dependent_variables = dependent_variables[,1:200]
primary_variable = 'BMI'
fdr_method='BY'
fdr_cutoff=.99
dependent_variables=list('dataset1'=dependent_variables,'dataset2'=dependent_variables)
independent_variables=list('dataset1'=independent_variables,'dataset2'=independent_variables)
a=voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
a=voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
devtools::install_local('~/GitHub/voe/',force=TRUE)
library(voe)
a=voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
#example files for loading
library(tidyverse)
independent_variables = readRDS('~/GitHub/voe/data/final_metadata.rds')[[2]][[1]] %>% type.convert() %>% dplyr::select(-runID,-subjectID)
dependent_variables = readRDS('~/GitHub/voe/data/abundance_data.rds') %>% dplyr::select(-dataset_name)
dependent_variables = dependent_variables[,1:200]
primary_variable = 'BMI'
fdr_method='BY'
fdr_cutoff=.99
dependent_variables=list('dataset1'=dependent_variables,'dataset2'=dependent_variables)
independent_variables=list('dataset1'=independent_variables,'dataset2'=independent_variables)
a=voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=50000,meta_analysis=TRUE)
a=voe::full_voe_pipeline(dependent_variables,independent_variables,primary_variable,model_type='gaussian',fdr_method='BY',fdr_cutoff=0.99,max_vibration_num=10,meta_analysis=TRUE)
a
library(devtools)
install_local('~/GitHub/voe/')
install_local('~/GitHub/voe/',force=TRUE)
library(devtools)
devtools::load_all()
setwd('~/GitHub/voe/')
metadata = readRDS('../../data/metadata_for_test.rds')[[2]][[1]]
abundance = readRDS('../../data/abundance_data_for_test.rds')
abundance = abundance[,1:10]
setwd('~/GitHub/voe/')
setwd('./tests/testthat')
devtools::load_all()
metadata = readRDS('../../data/metadata_for_test.rds')[[2]][[1]]
abundance = readRDS('../../data/abundance_data_for_test.rds')
abundance = abundance[,1:10]
bound_data = dplyr::tibble(dependent_variables=list(abundance),independent_variables=list(metadata),dsid=1)
expect_error(compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9), regexp = NA)
abundance
metadata
metadata = readRDS('../../data/metadata_for_test.rds')[[2]][[1]]
abundance = readRDS('../../data/abundance_data_for_test.rds')
abundance = abundance[,1:10]
bound_data = dplyr::tibble(dependent_variables=list(abundance),independent_variables=list(metadata),dsid=1)
bound_data
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9)
metadata = readRDS('../../data/metadata_for_test.rds')
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9)
metadata
abundance
expect_error(compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9), regexp = NA)
bound_data = dplyr::tibble(dependent_variables=list(abundance),independent_variables=list(metadata),dsid=1)
expect_error(compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9), regexp = NA)
bound_data
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9)
∫
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9)
primary_variable='BMI'
model_type = 'gaussian'
proportion_cutoff = 0.9
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proporti    output = apply(bound_data, 1, function(x) run_associations(x,primary_variable,model_type,proportion_cutoff))
on_cutoff = 0.9)
output = apply(bound_data, 1, function(x) run_associations(x,primary_variable,model_type,proportion_cutoff))
dependent_variables <- dplyr::as_tibble(x[[1]])
toremove = which(colSums(dependent_variables %>% dplyr::select(-sampleID) == 0,na.rm=TRUE)/nrow(dependent_variables)>proportion_cutoff)
message(paste("Removing",length(toremove),"features that are at least",proportion_cutoff*100,"percent zero values."))
dependent_variables=dependent_variables %>% dplyr::select(-(toremove+1))
independent_variables <- dplyr::as_tibble(x[[2]])
message(paste('Computing',as.character(ncol(dependent_variables)-1),'associations for dataset',as.character(unname(unlist(x[[3]])))))
colnames(dependent_variables)[1]='sampleID'
colnames(independent_variables)[1]='sampleID'
tokeep = independent_variables %>% tidyr::drop_na() %>% dplyr::select_if(~ length(unique(.)) > 1) %>% colnames
todrop = setdiff(colnames(independent_variables),tokeep)
if(length(todrop)>1){
message('Dropping the following variables due to either lacking multiple levels or containing NaN values:')
print(todrop)
}
dependent_variables=metadata
dependent_variables=abundance
independent_variables=metadata
dependent_variables <- dplyr::as_tibble(x[[1]])
toremove = which(colSums(dependent_variables %>% dplyr::select(-sampleID) == 0,na.rm=TRUE)/nrow(dependent_variables)>proportion_cutoff)
message(paste("Removing",length(toremove),"features that are at least",proportion_cutoff*100,"percent zero values."))
dependent_variables=dependent_variables %>% dplyr::select(-(toremove+1))
independent_variables <- dplyr::as_tibble(x[[2]])
message(paste('Computing',as.character(ncol(dependent_variables)-1),'associations for dataset',as.character(unname(unlist(x[[3]])))))
colnames(dependent_variables)[1]='sampleID'
colnames(independent_variables)[1]='sampleID'
tokeep = independent_variables %>% tidyr::drop_na() %>% dplyr::select_if(~ length(unique(.)) > 1) %>% colnames
todrop = setdiff(colnames(independent_variables),tokeep)
if(length(todrop)>1){
message('Dropping the following variables due to either lacking multiple levels or containing NaN values:')
print(todrop)
}
toremove = which(colSums(dependent_variables %>% dplyr::select(-sampleID) == 0,na.rm=TRUE)/nrow(dependent_variables)>proportion_cutoff)
message(paste("Removing",length(toremove),"features that are at least",proportion_cutoff*100,"percent zero values."))
dependent_variables=dependent_variables %>% dplyr::select(-(toremove+1))
independent_variables <- dplyr::as_tibble(x[[2]])
message(paste('Computing',as.character(ncol(dependent_variables)-1),'associations for dataset',as.character(unname(unlist(x[[3]])))))
colnames(dependent_variables)[1]='sampleID'
colnames(independent_variables)[1]='sampleID'
tokeep = independent_variables %>% tidyr::drop_na() %>% dplyr::select_if(~ length(unique(.)) > 1) %>% colnames
todrop = setdiff(colnames(independent_variables),tokeep)
dependent_variables
independent_variables=independent_variables %>% dplyr::select(-all_of(todrop))
out = purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff)) %>% dplyr::bind_rows() %>% filter(term!='(Intercept)') %>% dplyr::mutate( bonferroni = p.adjust(p.value, method = "bonferroni"), BH = p.adjust(p.value, method = "BH"), BY = p.adjust(p.value, method = "BY"))
purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff))
install_local('~/GitHub/voe/',force=TRUE)
devtools::load_all()
library(voe)
purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff))
devtools::test()
compute_initial_associations(bound_data,primary_variable='BMI',model_type = 'gaussian',proportion_cutoff = 0.9)
output = apply(bound_data, 1, function(x) run_associations(x,primary_variable,model_type,proportion_cutoff))
output  out = purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff)) %>% dplyr::bind_rows() %>% filter(term!='(Intercept)') %>% dplyr::mutate( bonferroni = p.adjust(p.value, method = "bonferroni"), BH = p.adjust(p.value, method = "BH"), BY = p.adjust(p.value, method = "BY"))
out = purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff)) %>% dplyr::bind_rows() %>% filter(term!='(Intercept)') %>% dplyr::mutate( bonferroni = p.adjust(p.value, method = "bonferroni"), BH = p.adjust(p.value, method = "BH"), BY = p.adjust(p.value, method = "BY"))
out
purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff))
purrr::map(seq_along(dependent_variables %>% dplyr::select(-sampleID)), function(j) regression(j,independent_variables,dependent_variables,primary_variable,model_type,proportion_cutoff)) %>% dplyr::bind_rows()
